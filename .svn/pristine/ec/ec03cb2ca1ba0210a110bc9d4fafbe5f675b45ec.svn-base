using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using Utilities;

namespace Res_System.Updates.ResEvents
{
    public partial class EventScreen : Form
    {
        bool IsValid;
        string ErrorString = "";
        bool AddNew;
        int ReferenceNumber;
        int TempRes;
        string from_where;

        NS_Catering.StrongTypesNS.ds_res_functionsDataSet ds_function = new NS_Catering.StrongTypesNS.ds_res_functionsDataSet();

        bool loaded = false;

        public EventScreen(string _from_where,bool _AddNew, int RefNo,int _tempres)
        {
            InitializeComponent();
            from_where = _from_where;

            AddNew = _AddNew;
            ReferenceNumber = RefNo;
            TempRes = _tempres;
        }

        private void EventScreen_Load(object sender, EventArgs e)
        {
            try
            {
            
                grp_initial.Enabled = AddNew;

                NS_Conference.StrongTypesNS.ds_conference_lookupDataSet ds_diets = Proxy.ConferenceSystem.Get_Conference_Code_Descriptions();
                bs_diets.DataSource = ds_diets.tt_diets;

                cb_fn_time.Items.Add(new Item("Breakfast", "B"));
                cb_fn_time.Items.Add(new Item("Lunch", "L"));
                cb_fn_time.Items.Add(new Item("Supper", "S"));
                cb_fn_time.SelectedIndex = 1;

                int x;
                for (x = 1; x <= 4; x = x + 1) //from 16h to 18h hours
                {
                    cb_meal_cnt.Items.Add(x);
                }
                cb_meal_cnt.SelectedIndex = 0;
                get_function_details();

               
            }
            catch (Exception ex)
            {
                Utils.HandleException(ExceptionSource.Catering, ex);
            }
        }

        private void get_function_details()
        {
            try
            {

                bool Submitted;
                string feedback = Proxy.CateringSystem.get_a_function(AddNew, ReferenceNumber, TempRes, out ds_function, out Submitted);
                if (feedback != "")
                {
                    MessageBox.Show(feedback, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    this.Close();
                }
                else
                {
                    if (AddNew == false)
                    {
                       
                        dg_students.Columns[cn_attending.Name].ReadOnly = false;
                        dg_students.Columns[cn_mealcnt.Name].ReadOnly = false;
                        btn_cancel.Visible = false;
                        btn_save.Visible = false;
                        btn_update_details.Visible = true;
                        pnl_details.Enabled = false;
                        
                        dg_students.Enabled = true;
                        btn_register.Enabled = true;
                        btn_exit.Enabled = true;
                        btn_submit.Enabled = true;
                    }
                    else
                    {
                         
                        btn_cancel.Visible = true;
                        btn_save.Visible = true;
                        btn_update_details.Visible = false;
                        pnl_details.Enabled = true;
                        
                        dg_students.Enabled = false;
                        btn_register.Enabled = false;
                        btn_exit.Enabled = false;
                        btn_submit.Enabled = false;
                        

                    }

                    bs_function.DataSource = ds_function.tt_res_events;
                    bs_students.DataSource = ds_function.tt_event_stu;
                    if (AddNew && from_where == "Res") txt_resname.Text = Global.Global.resname.ToString(); 

                    loaded = true;

                    if (AddNew == false)
                    {
                        if (Submitted)
                        {
                            if (from_where == "Res") pnl_details.Enabled = dg_students.Enabled = pnl_buttons.Enabled = btn_submit.Enabled = false;
                            else pnl_details.Enabled = dg_students.Enabled = pnl_buttons.Enabled = btn_submit.Enabled = true;
                        }
                        else
                        {
                            pnl_details.Enabled = false;                           
                            dg_students.Enabled = pnl_buttons.Enabled = btn_submit.Enabled = true;
                        }
                    }
                }


             }
            catch (Exception ex)
            {
                Utils.HandleException(ExceptionSource.Catering, ex);
            }
        }

        private void btn_submit_Click(object sender, EventArgs e)
        {
            try
            {
                IsValid = true;
                valid_event();
                if (IsValid)
                {
                    if (MessageBox.Show("If you confirm this function, no futher changes will be allowed. Do you want to confirm?", "Confirm Event Details", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                    {
                        string feedback = Proxy.CateringSystem.submit_function_details(ReferenceNumber);
                        MessageBox.Show(feedback, "Confirm Event", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        if (!feedback.Contains("Error")) this.Close();
                    }
                }
            }
            catch (Exception ex)
            {
                Utils.HandleException(ExceptionSource.Catering, ex);
            }
        }

        private void valid_event()
        {
            if (dte_reply_dte.Value >= dte_fn_dte.Value)
            {
                IsValid = false;
                ErrorString = "Reply date should be before the Function date";
                return;
            }



            if (txt_description.Text.ToString() == string.Empty)
            {
                IsValid = false;
                ErrorString = "Please enter function details to proceed";
                return;
            }

            if (cb_fn_time.SelectedIndex < 0)
            {
                IsValid = false;
                ErrorString = "Please select function start time to proceed";
                return;
            }
             

        }

        private void dg_students_CellValueChanged(object sender, DataGridViewCellEventArgs e)
        {
            try
            {
                if (loaded == true)
                {
                    if (dg_students.CurrentCell == null) return;

                    if (dg_students.CurrentCell.OwningColumn.Name.Equals(cn_attending.Name) | dg_students.CurrentCell.OwningColumn.Name.Equals(cn_diet.Name) | dg_students.CurrentCell.OwningColumn.Name.Equals(cn_mealcnt.Name))
                    {
                        string tempstuno = dg_students[cn_stuno.Name, e.RowIndex].Value.ToString();
                        bool tempattend = bool.Parse(dg_students[cn_attending.Name, e.RowIndex].Value.ToString());
                        int tempcnt = int.Parse(dg_students[cn_mealcnt.Name, e.RowIndex].Value.ToString());
                        string tempdiet = dg_students[cn_diet.Name, e.RowIndex].Value.ToString();

                        Proxy.CateringSystem.update_function_register(ReferenceNumber, tempstuno, tempcnt, tempdiet, tempattend);


                    }
                }

            }
            catch (Exception ex)
            {
                Utils.HandleException(ExceptionSource.Catering, ex);
            }
        }

        private void dg_students_CurrentCellDirtyStateChanged(object sender, EventArgs e)
        {
            if (dg_students.IsCurrentCellDirty && dg_students.CurrentCell.GetType().Equals(typeof(DataGridViewCheckBoxCell)))
            {
                dg_students.CommitEdit(DataGridViewDataErrorContexts.Commit);
            }

        }

        private void button1_Click(object sender, EventArgs e)
        {
            FunctionReports frmreports = new FunctionReports("FunctionRegister", ReferenceNumber, txt_description.Text.ToString(), dte_fn_dte.Value, cb_fn_time.Text, dte_reply_dte.Value, cb_meal_cnt.Text.ToString());
            frmreports.Show();
        }

        private void chk_compulsory_CheckedChanged(object sender, EventArgs e)
        {
            if (chk_compulsory.Checked == true)
            {
                chk_default.Checked = true;
                chk_default.Enabled = false;
            }
            else chk_default.Enabled = true;
        }

       private void EventScreen_FormClosing(object sender, FormClosingEventArgs e)
        {
            /*try
           {
               string feedback = "";
               if (AddNew == false) feedback = Proxy.CateringSystem.check_function_changes(ds_function);
                
               if (feedback != "")
               {
                   if (MessageBox.Show(feedback, "Unsaved Changes", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.No) e.Cancel = true;
               }
           }
           catch (Exception ex)
           {
               Utils.HandleException(ExceptionSource.Catering, ex); 
           }*/
        } 

     

        private void btn_exit_Click(object sender, EventArgs e)
        {
            this.Close();
        }

        private void btn_update_details_Click(object sender, EventArgs e)
        {
            btn_cancel.Visible = true;
            btn_save.Visible = true;
            btn_update_details.Visible = false;
            pnl_details.Enabled = true;
            dg_students.Enabled = false;
            btn_submit.Enabled = false;
            btn_register.Enabled = false;
            btn_exit.Enabled = false;
        }

        private void btn_cancel_Click(object sender, EventArgs e)
        {
            try
            {
                if (AddNew == true) this.Close();
                else
                {
                    string feedback = Proxy.CateringSystem.check_function_changes(ds_function);
                    if (feedback == "") get_function_details();
                    else
                    {
                        if (MessageBox.Show(feedback, "Unsaved Changes", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes) get_function_details();
                    }
                }
            }
            catch (Exception ex)
            {
                Utils.HandleException(ExceptionSource.Catering, ex);
            }
        }

        private void btn_save_Click(object sender, EventArgs e)
        {
            try
            {
                IsValid = true;
                valid_event();
                if (IsValid)
                {
                    string feedback = Proxy.CateringSystem.update_function(AddNew, ds_function, out ReferenceNumber);
                    MessageBox.Show(feedback, "Update Function Details", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    if (!feedback.Contains("Error"))
                    {
                        AddNew = false;
                        get_function_details();
                    }
                }
                else MessageBox.Show(ErrorString, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            catch (Exception ex)
            {
                Utils.HandleException(ExceptionSource.Catering, ex);
            }
        }
    }
}
